/*
 * This file was generated by dbusidl2cpp version 0.5
 * when processing input file org.kde.KSpeech.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef KSPEECHINTERFACE_H_251301150162335
#define KSPEECHINTERFACE_H_251301150162335

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <dbus/qdbus.h>

/*
 * Proxy class for interface org.kde.KSpeech
 */
class OrgKdeKSpeechInterface: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.kde.KSpeech"; }

public:
    explicit OrgKdeKSpeechInterface(QDBusAbstractInterfacePrivate *p);

    ~OrgKdeKSpeechInterface();

public Q_SLOTS: // METHODS
    inline QDBusReply<int> appendText(const QString &text, uint jobNum)
    {
        return call(QLatin1String("appendText.su"), text, jobNum);
    }

    inline Q_ASYNC void changeTextTalker(const QString &talker, uint jobNum)
    {
        call(NoWaitForReply, QLatin1String("changeTextTalker.su"), talker, jobNum);
    }

    inline QDBusReply<uint> getCurrentTextJob()
    {
        return call(QLatin1String("getCurrentTextJob"));
    }

    inline QDBusReply<QStringList> getTalkers()
    {
        return call(QLatin1String("getTalkers"));
    }

    inline QDBusReply<int> getTextCount(uint jobNum)
    {
        return call(QLatin1String("getTextCount.u"), jobNum);
    }

    inline QDBusReply<uint> getTextJobCount()
    {
        return call(QLatin1String("getTextJobCount"));
    }

    inline QDBusReply<QByteArray> getTextJobInfo(uint jobNum)
    {
        return call(QLatin1String("getTextJobInfo.u"), jobNum);
    }

    inline QDBusReply<QString> getTextJobNumbers()
    {
        return call(QLatin1String("getTextJobNumbers"));
    }

    inline QDBusReply<QString> getTextJobSentence(uint jobNum, uint seq)
    {
        return call(QLatin1String("getTextJobSentence.uu"), jobNum, seq);
    }

    inline QDBusReply<int> getTextJobState(uint jobNum)
    {
        return call(QLatin1String("getTextJobState.u"), jobNum);
    }

    inline QDBusReply<bool> isSpeakingText()
    {
        return call(QLatin1String("isSpeakingText"));
    }

    inline QDBusReply<int> jumpToTextPart(int partNum, uint jobNum)
    {
        return call(QLatin1String("jumpToTextPart.iu"), partNum, jobNum);
    }

    inline Q_ASYNC void kttsdExit()
    {
        call(NoWaitForReply, QLatin1String("kttsdExit"));
    }

    inline QDBusReply<uint> moveRelTextSentence(int n, uint jobNum)
    {
        return call(QLatin1String("moveRelTextSentence.iu"), n, jobNum);
    }

    inline Q_ASYNC void moveTextLater(uint jobNum)
    {
        call(NoWaitForReply, QLatin1String("moveTextLater.u"), jobNum);
    }

    inline Q_ASYNC void pauseText(uint jobNum)
    {
        call(NoWaitForReply, QLatin1String("pauseText.u"), jobNum);
    }

    inline Q_ASYNC void reinit()
    {
        call(NoWaitForReply, QLatin1String("reinit"));
    }

    inline Q_ASYNC void removeText(uint jobNum)
    {
        call(NoWaitForReply, QLatin1String("removeText.u"), jobNum);
    }

    inline Q_ASYNC void resumeText(uint jobNum)
    {
        call(NoWaitForReply, QLatin1String("resumeText.u"), jobNum);
    }

    inline Q_ASYNC void sayMessage(const QString &message, const QString &talker)
    {
        call(NoWaitForReply, QLatin1String("sayMessage.ss"), message, talker);
    }

    inline Q_ASYNC void sayScreenReaderOutput(const QString &msg, const QString &talker)
    {
        call(NoWaitForReply, QLatin1String("sayScreenReaderOutput.ss"), msg, talker);
    }

    inline QDBusReply<uint> sayText(const QString &text, const QString &talker)
    {
        return call(QLatin1String("sayText.ss"), text, talker);
    }

    inline Q_ASYNC void sayWarning(const QString &warning, const QString &talker)
    {
        call(NoWaitForReply, QLatin1String("sayWarning.ss"), warning, talker);
    }

    inline QDBusReply<uint> setFile(const QString &filename, const QString &talker, const QString &encoding)
    {
        return call(QLatin1String("setFile.sss"), filename, talker, encoding);
    }

    inline Q_ASYNC void setSentenceDelimiter(const QString &delimiter)
    {
        call(NoWaitForReply, QLatin1String("setSentenceDelimiter.s"), delimiter);
    }

    inline QDBusReply<uint> setText(const QString &text, const QString &talker)
    {
        return call(QLatin1String("setText.ss"), text, talker);
    }

    inline Q_ASYNC void showDialog()
    {
        call(NoWaitForReply, QLatin1String("showDialog"));
    }

    inline Q_ASYNC void speakClipboard()
    {
        call(NoWaitForReply, QLatin1String("speakClipboard"));
    }

    inline Q_ASYNC void startText(uint jobNum)
    {
        call(NoWaitForReply, QLatin1String("startText.u"), jobNum);
    }

    inline Q_ASYNC void stopText(uint jobNum)
    {
        call(NoWaitForReply, QLatin1String("stopText.u"), jobNum);
    }

    inline QDBusReply<bool> supportsMarkers(const QString &talker)
    {
        return call(QLatin1String("supportsMarkers.s"), talker);
    }

    inline QDBusReply<bool> supportsMarkup(const QString &talker, uint markupType)
    {
        return call(QLatin1String("supportsMarkup.su"), talker, markupType);
    }

    inline QDBusReply<QString> talkerCodeToTalkerId(const QString &talkerCode)
    {
        return call(QLatin1String("talkerCodeToTalkerId.s"), talkerCode);
    }

    inline QDBusReply<QString> userDefaultTalker()
    {
        return call(QLatin1String("userDefaultTalker"));
    }

    inline QDBusReply<QString> version()
    {
        return call(QLatin1String("version"));
    }

Q_SIGNALS: // SIGNALS
    void kttsdExiting();
    void kttsdStarted();
    void markerSeen(const QString &appId, const QString &markerName);
    void sentenceFinished(const QString &appId, uint jobNum, uint seq);
    void sentenceStarted(const QString &appId, uint jobNum, uint seq);
    void textAppended(const QString &appId, uint jobNum, int partNum);
    void textFinished(const QString &appId, uint jobNum);
    void textPaused(const QString &appId, uint jobNum);
    void textRemoved(const QString &appId, uint jobNum);
    void textResumed(const QString &appId, uint jobNum);
    void textSet(const QString &appId, uint jobNum);
    void textStarted(const QString &appId, uint jobNum);
    void textStopped(const QString &appId, uint jobNum);
};

namespace org {
  namespace kde {
    typedef ::OrgKdeKSpeechInterface KSpeech;
  }
}
#endif
