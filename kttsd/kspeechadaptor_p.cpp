/*
 * This file was generated by dbusidl2cpp version 0.6
 * Command line was: dbusidl2cpp -m -a kspeechadaptor -p kspeechinterface -- org.kde.KSpeech.xml
 *
 * dbusidl2cpp is Copyright (C) 2006 Trolltech AS. All rights reserved.
 *
 * This is an auto-generated file.
 * This file may have been hand-edited. Look for HAND-EDIT comments
 * before re-generating it.
 */

#include "kspeechadaptor_p.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class KSpeechAdaptor
 */

KSpeechAdaptor::KSpeechAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

KSpeechAdaptor::~KSpeechAdaptor()
{
    // destructor
}

bool KSpeechAdaptor::isSpeaking() const
{
    // get the value of property isSpeaking
    return qvariant_cast< bool >(parent()->property("isSpeaking"));
}

QString KSpeechAdaptor::version() const
{
    // get the value of property version
    return qvariant_cast< QString >(parent()->property("version"));
}

QString KSpeechAdaptor::applicationName(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.applicationName
    QString out0;
    QMetaObject::invokeMethod(parent(), "applicationName", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->applicationName();
    return out0;
}

bool KSpeechAdaptor::autoConfigureTalkersOn(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.autoConfigureTalkersOn
    bool out0;
    QMetaObject::invokeMethod(parent(), "autoConfigureTalkersOn", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->autoConfigureTalkersOn();
    return out0;
}

void KSpeechAdaptor::changeJobTalker(int jobNum, const QString &talker)
{
    // handle method call org.kde.KSpeech.changeJobTalker
    QMetaObject::invokeMethod(parent(), "changeJobTalker", Q_ARG(int, jobNum), Q_ARG(QString, talker));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->changeJobTalker(jobNum, talker);
}

int KSpeechAdaptor::defaultPriority(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.defaultPriority
    int out0;
    QMetaObject::invokeMethod(parent(), "defaultPriority", Q_RETURN_ARG(int, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->defaultPriority();
    return out0;
}

QString KSpeechAdaptor::defaultTalker(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.defaultTalker
    QString out0;
    QMetaObject::invokeMethod(parent(), "defaultTalker", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->defaultTalker();
    return out0;
}

bool KSpeechAdaptor::filteringOn(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.filteringOn
    bool out0;
    QMetaObject::invokeMethod(parent(), "filteringOn", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->filteringOn();
    return out0;
}

int KSpeechAdaptor::getCurrentJob()
{
    // handle method call org.kde.KSpeech.getCurrentJob
    int out0;
    QMetaObject::invokeMethod(parent(), "getCurrentJob", Q_RETURN_ARG(int, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getCurrentJob();
    return out0;
}

int KSpeechAdaptor::getJobCount(int priority, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.getJobCount
    int out0;
    QMetaObject::invokeMethod(parent(), "getJobCount", Q_RETURN_ARG(int, out0), Q_ARG(int, priority));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getJobCount(priority);
    return out0;
}

QByteArray KSpeechAdaptor::getJobInfo(int jobNum)
{
    // handle method call org.kde.KSpeech.getJobInfo
    QByteArray out0;
    QMetaObject::invokeMethod(parent(), "getJobInfo", Q_RETURN_ARG(QByteArray, out0), Q_ARG(int, jobNum));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getJobInfo(jobNum);
    return out0;
}

QStringList KSpeechAdaptor::getJobNumbers(int priority, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.getJobNumbers
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "getJobNumbers", Q_RETURN_ARG(QStringList, out0), Q_ARG(int, priority));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getJobNumbers(priority);
    return out0;
}

QString KSpeechAdaptor::getJobSentence(int jobNum, int seq)
{
    // handle method call org.kde.KSpeech.getJobSentence
    QString out0;
    QMetaObject::invokeMethod(parent(), "getJobSentence", Q_RETURN_ARG(QString, out0), Q_ARG(int, jobNum), Q_ARG(int, seq));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getJobSentence(jobNum, seq);
    return out0;
}

int KSpeechAdaptor::getJobState(int jobNum)
{
    // handle method call org.kde.KSpeech.getJobState
    int out0;
    QMetaObject::invokeMethod(parent(), "getJobState", Q_RETURN_ARG(int, out0), Q_ARG(int, jobNum));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getJobState(jobNum);
    return out0;
}

int KSpeechAdaptor::getSentenceCount(int jobNum)
{
    // handle method call org.kde.KSpeech.getSentenceCount
    int out0;
    QMetaObject::invokeMethod(parent(), "getSentenceCount", Q_RETURN_ARG(int, out0), Q_ARG(int, jobNum));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getSentenceCount(jobNum);
    return out0;
}

int KSpeechAdaptor::getTalkerCapabilities1(const QString &talker)
{
    // handle method call org.kde.KSpeech.getTalkerCapabilities1
    int out0;
    QMetaObject::invokeMethod(parent(), "getTalkerCapabilities1", Q_RETURN_ARG(int, out0), Q_ARG(QString, talker));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getTalkerCapabilities1(talker);
    return out0;
}

int KSpeechAdaptor::getTalkerCapabilities2(const QString &talker)
{
    // handle method call org.kde.KSpeech.getTalkerCapabilities2
    int out0;
    QMetaObject::invokeMethod(parent(), "getTalkerCapabilities2", Q_RETURN_ARG(int, out0), Q_ARG(QString, talker));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getTalkerCapabilities2(talker);
    return out0;
}

QStringList KSpeechAdaptor::getTalkerCodes()
{
    // handle method call org.kde.KSpeech.getTalkerCodes
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "getTalkerCodes", Q_RETURN_ARG(QStringList, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getTalkerCodes();
    return out0;
}

QStringList KSpeechAdaptor::getTalkerVoices(const QString &talker)
{
    // handle method call org.kde.KSpeech.getTalkerVoices
    QStringList out0;
    QMetaObject::invokeMethod(parent(), "getTalkerVoices", Q_RETURN_ARG(QStringList, out0), Q_ARG(QString, talker));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->getTalkerVoices(talker);
    return out0;
}

QString KSpeechAdaptor::htmlFilterXsltFile(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.htmlFilterXsltFile
    QString out0;
    QMetaObject::invokeMethod(parent(), "htmlFilterXsltFile", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->htmlFilterXsltFile();
    return out0;
}

bool KSpeechAdaptor::isApplicationPaused(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.isApplicationPaused
    bool out0;
    QMetaObject::invokeMethod(parent(), "isApplicationPaused", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->isApplicationPaused();
    return out0;
}

bool KSpeechAdaptor::isSystemManager(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.isSystemManager
    bool out0;
    QMetaObject::invokeMethod(parent(), "isSystemManager", Q_RETURN_ARG(bool, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->isSystemManager();
    return out0;
}

void KSpeechAdaptor::kttsdExit()
{
    // handle method call org.kde.KSpeech.kttsdExit
    QMetaObject::invokeMethod(parent(), "kttsdExit");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->kttsdExit();
}

void KSpeechAdaptor::moveJobLater(int jobNum)
{
    // handle method call org.kde.KSpeech.moveJobLater
    QMetaObject::invokeMethod(parent(), "moveJobLater", Q_ARG(int, jobNum));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->moveJobLater(jobNum);
}

int KSpeechAdaptor::moveRelSentence(int jobNum, int n)
{
    // handle method call org.kde.KSpeech.moveRelSentence
    int out0;
    QMetaObject::invokeMethod(parent(), "moveRelSentence", Q_RETURN_ARG(int, out0), Q_ARG(int, jobNum), Q_ARG(int, n));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->moveRelSentence(jobNum, n);
    return out0;
}

void KSpeechAdaptor::pause(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.pause
    QMetaObject::invokeMethod(parent(), "pause");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->pause();
}

void KSpeechAdaptor::reinit()
{
    // handle method call org.kde.KSpeech.reinit
    QMetaObject::invokeMethod(parent(), "reinit");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->reinit();
}

void KSpeechAdaptor::removeAllJobs(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.removeAllJobs
    QMetaObject::invokeMethod(parent(), "removeAllJobs");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->removeAllJobs();
}

void KSpeechAdaptor::removeJob(int jobNum)
{
    // handle method call org.kde.KSpeech.removeJob
    QMetaObject::invokeMethod(parent(), "removeJob", Q_ARG(int, jobNum));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->removeJob(jobNum);
}

void KSpeechAdaptor::resume(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.resume
    QMetaObject::invokeMethod(parent(), "resume");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->resume();
}

int KSpeechAdaptor::say(const QString &text, int options, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.say
    int out0;
    QMetaObject::invokeMethod(parent(), "say", Q_RETURN_ARG(int, out0), Q_ARG(QString, text), Q_ARG(int, options));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->say(text, options);
    return out0;
}

int KSpeechAdaptor::sayClipboard(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.sayClipboard
    int out0;
    QMetaObject::invokeMethod(parent(), "sayClipboard", Q_RETURN_ARG(int, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->sayClipboard();
    return out0;
}

int KSpeechAdaptor::sayFile(const QString &filename, const QString &encoding, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.sayFile
    int out0;
    QMetaObject::invokeMethod(parent(), "sayFile", Q_RETURN_ARG(int, out0), Q_ARG(QString, filename), Q_ARG(QString, encoding));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->sayFile(filename, encoding);
    return out0;
}

QString KSpeechAdaptor::sentenceDelimiter(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.sentenceDelimiter
    QString out0;
    QMetaObject::invokeMethod(parent(), "sentenceDelimiter", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->sentenceDelimiter();
    return out0;
}

void KSpeechAdaptor::setApplicationName(const QString &applicationName, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.setApplicationName
    QMetaObject::invokeMethod(parent(), "setApplicationName", Q_ARG(QString, applicationName));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setApplicationName(applicationName);
}

void KSpeechAdaptor::setAutoConfigureTalkersOn(bool autoConfigureTalkersOn, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.setAutoConfigureTalkersOn
    QMetaObject::invokeMethod(parent(), "setAutoConfigureTalkersOn", Q_ARG(bool, autoConfigureTalkersOn));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setAutoConfigureTalkersOn(autoConfigureTalkersOn);
}

void KSpeechAdaptor::setDefaultPriority(int defaultPriority, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.setDefaultPriority
    QMetaObject::invokeMethod(parent(), "setDefaultPriority", Q_ARG(int, defaultPriority));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setDefaultPriority(defaultPriority);
}

void KSpeechAdaptor::setDefaultTalker(const QString &defaultTalker, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.setDefaultTalker
    QMetaObject::invokeMethod(parent(), "setDefaultTalker", Q_ARG(QString, defaultTalker));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setDefaultTalker(defaultTalker);
}

void KSpeechAdaptor::setFilteringOn(bool filteringOn, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.setFilteringOn
    QMetaObject::invokeMethod(parent(), "setFilteringOn", Q_ARG(bool, filteringOn));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setFilteringOn(filteringOn);
}

void KSpeechAdaptor::setHtmlFilterXsltFile(const QString &htmlFilterXsltFile, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.setHtmlFilterXsltFile
    QMetaObject::invokeMethod(parent(), "setHtmlFilterXsltFile", Q_ARG(QString, htmlFilterXsltFile));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setHtmlFilterXsltFile(htmlFilterXsltFile);
}

void KSpeechAdaptor::setIsSystemManager(bool isSystemManager, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.setIsSystemManager
    QMetaObject::invokeMethod(parent(), "setIsSystemManager", Q_ARG(bool, isSystemManager));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setIsSystemManager(isSystemManager);
}

void KSpeechAdaptor::setSentenceDelimiter(const QString &sentenceDelimiter, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.setSentenceDelimiter
    QMetaObject::invokeMethod(parent(), "setSentenceDelimiter", Q_ARG(QString, sentenceDelimiter));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setSentenceDelimiter(sentenceDelimiter);
}

void KSpeechAdaptor::setSsmlFilterXsltFile(const QString &ssmlFilterXsltFile, const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.setSsmlFilterXsltFile
    QMetaObject::invokeMethod(parent(), "setSsmlFilterXsltFile", Q_ARG(QString, ssmlFilterXsltFile));

    // Alternative:
    //static_cast<YourObjectType *>(parent())->setSsmlFilterXsltFile(ssmlFilterXsltFile);
}

void KSpeechAdaptor::showManagerDialog()
{
    // handle method call org.kde.KSpeech.showManagerDialog
    QMetaObject::invokeMethod(parent(), "showManagerDialog");

    // Alternative:
    //static_cast<YourObjectType *>(parent())->showManagerDialog();
}

QString KSpeechAdaptor::ssmlFilterXsltFile(const QDBusMessage &msg)
{
    QMetaObject::invokeMethod(parent(), "setCallingAppId", Q_ARG(QString, msg.service()));
    // handle method call org.kde.KSpeech.ssmlFilterXsltFile
    QString out0;
    QMetaObject::invokeMethod(parent(), "ssmlFilterXsltFile", Q_RETURN_ARG(QString, out0));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->ssmlFilterXsltFile();
    return out0;
}

QString KSpeechAdaptor::talkerToTalkerId(const QString &talker)
{
    // handle method call org.kde.KSpeech.talkerToTalkerId
    QString out0;
    QMetaObject::invokeMethod(parent(), "talkerToTalkerId", Q_RETURN_ARG(QString, out0), Q_ARG(QString, talker));

    // Alternative:
    //out0 = static_cast<YourObjectType *>(parent())->talkerToTalkerId(talker);
    return out0;
}


#include "kspeechadaptor_p.moc"
